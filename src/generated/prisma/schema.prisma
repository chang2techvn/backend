// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String
  avatar    String?
  skills    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks         Task[]
  memberOf      ProjectMember[]
  refreshTokens RefreshToken[] // Added relation to RefreshToken
}

// Project model
model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tasks   Task[]
  members ProjectMember[]
}

// ProjectMember model (junction table for User-Project many-to-many)
model ProjectMember {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  joinedAt  DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

// Task model
model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Task status enum
enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

// RefreshToken model for better auth security
model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
